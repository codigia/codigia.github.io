{ 
    "speakers" : [
    {   
        "id" : "Matz",
        "name" : "Yukihiro 'Matz' Matsumoto",
        "title" : "Ruby Chief Architect",
        "bio" : "Yukihiro 'Matz' Matsumoto is the mastermind behind the inception of Ruby. Since 1993 he has been designing our precious jewel up to its latest 2.0 version. Meanwhile he has been working on mruby, a lightweight Ruby implementation. This summer, he will be celebrating with us the 20th anniversary of Ruby.",
        "avatar" : "http://euruko2013.codigia.com/avatar_matz.jpg"
    },
    {   
        "id" : "Koichi",
        "name" : "Koichi Sasada",
        "title" : "Ruby core commiter (CRuby's VM, YARV)",
        "bio" : "Koichi knows the inside outs of the Ruby VM. He has developed YARV (Yet another Ruby VM) which became the official Ruby VM when Ruby 1.9 was released. We believe he will give lots of insights in the Ruby VM, the new performance improments in Ruby 2.0 and will hint at the future of the Ruby VM.",
        "avatar" : "http://euruko2013.codigia.com/avatar_koichi.jpg"
    },
    {   
        "id" : "Klabnik",
        "name" : "Steve Klabnik",
        "title" : "Instructor & Open Source lead",
        "bio" : "Steve enjoys turning coffee into code, writing, philosophy, and physical activity. He is a contributor to many high visibility open source projects such as Sinatra, Resque, Rubinius and of course the venerable Ruby on Rails web framework. His talks are always insightful and inspiring. We shouldn't expect anything less for EuRuKo.",
        "avatar" : "http://euruko2013.codigia.com/avatar_klabnik.jpg"
    }
],

"agenda" : [
    {
        "start" : 1372397400,
        "end" : 1372401000,
        "title" : "Registration",
        "descr" : ""
    },
    {
        "start" : 1372401000,
        "end" : 1372402800,
        "title" : "Welcome, info, plan",
        "descr" : ""
    },
    {
        "start" : 1372402800,
        "end" : 1372406400,
        "speaker_id" : "Matz",
        "title" : "Keynote",
        "descr" : ""
    },
    {
        "start" : 1372406400,
        "end" : 1372409100,
        "speaker_id" : "Koichi",
        "title" : "No one plans for complexity, and neither should you!",
        "descr" : "<p>Great ideas start small, hell, just look at all the great services we use today, all of them small ideas which grew, and grew, and grew.</p>

<p>Do you think they planned for this level of scale from the outset? God no! And why would they? Planning too early can be the death of such a great idea!</p>

<p>The mantra is simple, start small, growth will come naturally.</p>

<p>That might sound stupid, but the idea is solid. As your product grows you will learn where the bottlenecks are, where the pain points in code and processing exist, and what needs to scale and what needs to be thrown out the door.</p>

<p>Travis CI was no different, started as a simple Rails app, it has now grown into a platform built upon over 9 different apps, using everything from Postgres, Redis, RabbitMQ, Memcached, S3, BlueBox, MRI, JRuby, Websockets, and a huge array of services helping with email, metrics, and alerts.</p>

<p>We never designed or planned for this, this came about from natural growth, and we have only just started.</p>

<p>This talk is a story of architecture, complexity, and growth, as well as a candid look on what we did wrong and could have done better.</p>

<p>And most importantly, this is a talk about how sometimes <strong>not</strong> building something is more important than building it in the first place.</p>"
    },
    {
        "start" : 1372409100,
        "end" : 1372410000,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372410000,
        "end" : 1372412700,
        "speaker_id" : "Koichi",
        "title" : "Ruby in the Lab",
        "descr" : "<p>It doesn't matter the science field, nowadays every research needs some kind of programming task to get/analize/produce results. When faced to a computational problem, scientists without programming background often choose Java, Python, R, Excel… to scratch their itch, why not Ruby? </p>

<p>Why scientists and people in academia and research centers are not using Ruby? </p>

<p>What can we do to make Ruby the language of preference in science? Is that even possible? </p>

<p>I'll ask you these questions and try to answer them in this talk.</p>"
    },
    {
        "start" : 1372412700,
        "end" : 1372415400,
        "speaker_id" : "Koichi",
        "title" : "Down the rb_newobj() Rabbit Hole: Garbage Collection and a Glimpse into Ruby's Future",
        "descr" : "<p>Garbage collection is one of the pillars of Ruby's performance story, but getting into the inner workings of MRI's garbage collector is a bit hairy. If you want to explore the garbage collector then you're going to have to get your hands deep into C code.</p>

<p>We're going to take a walk through the C internals from Foo.new through garbage collection in Ruby's MRI. We’ll examine the idioms and optimizations in the C source and leave you feeling comfortable to explore the code yourself.</p>

<p>At the end of the rb_newobj() rabbit hole is a whole world of garbage collection. Major changes have been made in MRI's garbage collector from Ruby 1.8 through 2.0: changes intended to make Ruby more performant, changes that can capitalize on MRI's roots in UNIX. From mark-and-sweep to copy-on-write and bitmap marking, we'll see what the future of Ruby performance might look like by peering through the window of the garbage collector. </p>"
    },
    {
        "start" : 1372415400,
        "end" : 1372419000,
        "title" : "Lunch",
        "descr" : "eating"
    },
    {
        "start" : 1372419000,
        "end" : 1372422600,
        "speaker_id" : "Klabnik",
        "title" : "Keynote II",
        "descr" : "keynote!"
    },
    {
        "start" : 1372422600,
        "end" : 1372425300,
        "speaker_id" : "Koichi",
        "title" : "Rove – efortless Vagrant provisioning",
        "descr" : "<p>Vagrant is a great tool to build development environments. It hits the bull's eye by the support of provisioning. Provisioners make your setup idempotent. However they also make you suffer – hanging out with Chef is easier said then done. There's a solution though.</p>

<p>Rove (<a href=\"http://www.rove.io\">http://www.rove.io</a>) is designed to solve the issue. The service allows you to generate provisioning config in one click using visual setup. Rove is the open-source project written in Ruby. But there's something behind what you see: the DSL. We've made Rove as extensible as possible. During this talk I will describe internals of the service to explain how to host its copy internally with your own set of packages and what benefits you are going to get with that.</p>

<p>I will also share with you the Roadmap of the project including some nice hidden yet niches that we are after ;)</p>"
    },
    {
        "start" : 1372425300,
        "end" : 1372426200,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372426200,
        "end" : 1372428900,
        "speaker_id" : "Koichi",
        "title" : "Crafting your own cave: deployments made easy with Mina",
        "descr" : "<p><strong>Want to know how to craft your deployment's environment and fully understand and be in control of what's going on every step?</strong></p>

<p><em>Dead simple.</em></p>

<p>Follow me on this talk and we will leverage <a href=\"http://nadarei.co/mina\">Mina</a>'s power: a bloody fast deployer with many integrations and a ridiculously simple plugin system to suit your needs.</p>"
    },
    {
        "start" : 1372428900,
        "end" : 1372431600,
        "speaker_id" : "Koichi",
        "title" : "⚡ Contributing to Ruby ⚡",
        "descr" : "<p>Newcomer or seasoned veteran looking to get involved with Ruby documentation?</p>

<p>The path to eternal gratification can seem like a scary one, but we'll show you it's alot easier than you thought.  Writing documentation is a great way to give back to the open source community and build your Ruby skills and fundamentals.</p>

<p>This talk will teach you the value of open-source, the benefits of contributing, and a little bit about how ruby-core works. You will learn what to look for when spotting documentation bugs in the MRI source code. We will cover the guidelines to writing MRI documentation, and how to submit a patch.</p>"
    },
    {
        "start" : 1372431600,
        "end" : 1372433400,
        "speaker_id" : "Koichi",
        "title" : "Object-Oriented Lessons for a Service-Oriented World",
        "descr" : "<p>The dreams of developers working on monolithic Rails applications are frequently filled with sugar plums and service-oriented architectures--but like any kind of software design, SOA can easily become a tangled mess. Many of the same principles that guide our software design can guide our architecture design. </p>

<p>We apply SOLID principles to applications to keep them loosely coupled, we design interfaces so we can send logical messages to our domain objects. We hide our databases behind abstractions because how we access our data shouldn't matter to how we consume it. Rarely, though, do we see the same practices applied to our services and APIs, leaving us with tightly coupled and difficult to extend service-oriented architectures. </p>

<p>If you are facing the monorail to SOA challenge, consider looking at your services as objects and your APIs as messages. Service-oriented applications are complex, and the best way to fend off complexity is though object-oriented design.</p>"
    },




    {
        "start" : 1372489200,
        "end" : 1372492800,
        "speaker_id" : "Matz",
        "title" : "Keynote III",
        "descr" : "The third keynote!"
    },
    {
        "start" : 1372492800,
        "end" : 1372495500,
        "speaker_id" : "Koichi",
        "title" : "The Esoteric Library",
        "descr" : "<p>Have you ever wondered what that ~20MB of code in your Ruby installation is there for? You didn't know Ruby came with a eso- standard library?! Well it totally does, and there's a lot of hidden gems in there just waiting for you to uncover. </p>

<p>Allow me to guide you through some of the more delightful members of the standard library. I will hand pick libraries authored by the pioneers of Ruby and show you the useful bits.</p>

<p>You'll discover a pure Ruby Markdown parser, practical configuration for the REPL, and distributed Ruby just to name a few.</p>"
    },
    {
        "start" : 1372495500,
        "end" : 1372496400,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372496400,
        "end" : 1372499100,
        "speaker_id" : "Koichi",
        "title" : "How Rails helps people understand new idea? - A case study on exporting local culture with Rails application",
        "descr" : "<p>There are many interesting local cultures in the world, but it is 
difficult to introduce such cultures to other people. 
Rails application can reduce such difficulty using some tips. </p>

<p>Our experience is introduction of Japanese 'Kukai' to French 
students. Kukai is a game to enjoy Haiku, short Japanese poetry. In 
Kukai, attendees score each Haikus and comments by each other. We 
developed a Kukai Rails application and this system used by a lecture at 
a French school. The lecture was well-received.
To develop our Kukai system, Internationalisation (i18n) 
is easy to support using Rails framework.</p>

<p>In this talk, we show our experience and key points of transferring one 
local culture to other cultures using Rails web application.</p>"
    },
    {
        "start" : 1372499100,
        "end" : 1372501800,
        "speaker_id" : "Koichi",
        "title" : "I See Your 127.32+, A Tale of Rationals",
        "descr" : "<p>Money, be careful with money.</p>

<p>While developing a brand new website for online betting I found the requirements related to the flow of money were just not possible to implement with traditional datatypes. There were fundamental features that no matter your precision, would just not work correctly.</p>

<p>After reflecting on the feature set, we ended up resorting to fractions. In this talk I'll explain how we integrated rationals in the full stack, from JavaScript down to PostgreSQL, going via Active Record. An interesting journey that ends with all cents under control, and me sleeping very well at night.</p>"
    },
    {
        "start" : 1372501800,
        "end" : 1372505400,
        "title" : "Lunch",
        "descr" : "eating"
    },
    {
        "start" : 1372505400,
        "end" : 1372509000,
        "speaker_id" : "Klabnik",
        "title" : "Keynote IV",
        "descr" : "The forth Keynote!"
    },
    {
        "start" : 1372509000,
        "end" : 1372511700,
        "speaker_id" : "Koichi",
        "title" : "The Days After Tomorrow — Are Cucumber, RSpec, Mini::Test And Friends Enough?",
        "descr" : "<p>The anniversaries we're celebrating at Euruko 2013 are a good reason to think about what you need to do, to create long lasting software. Let's think about the <em>future of the software we're building</em>.</p>

<p>Sure: If our software fails to provide enough value <em>today</em> (or at least in the near future), we'll probably be better off looking for the next job. However, software development is a game played in rounds — and most teams nearly always prefer to <em>stay in the game</em> for many rounds.</p>

<p>It's interesting — and a it worrying — that most of the testing techniques and approaches applied today are focussed on the <em>current</em> version of our software and its ability to solve to right problem and doing this correctly: We concentrate on a relatively short period of time.</p>

<p>However, we should also make sure our systems can cope with tomorrows requirements, customers and users. Therefore, let's look at some ways we can do this.</p>"
    },
    {
        "start" : 1372511700,
        "end" : 1372512600,
        "title" : "Break",
        "descr" : ""
    },
    {
        "start" : 1372512600,
        "end" : 1372515300,
        "speaker_id" : "Koichi",
        "title" : "Opal, get back at doing Ruby on your browser ☺",
        "descr" : "<p><img src=\"https://f.cloud.github.com/assets/1051/343869/0d2f31d2-9ded-11e2-9848-553e0b8e4232.png\"></p>

<p><a href=\"http://opalrb.org\">Opal</a> is a production ready Ruby-to-Javascript compiler. In this presentation I will talk on how Ruby can be used to build awesome code for the browser. Keep applying all of your OO design skills having less context switch and increasing happiness!</p>

<p>This presentation will cover:</p>

<ul>
<li>a general overview and why I feel so good doing Ruby on the client</li>
<li><em>some</em> internals along explanation of implementing choices</li>
<li>real world (™) use cases (including code ported from the server to the browser)</li>
<li>fun! :-D</li>
</ul>

<p><br>
<br>
<br>
<br></p>

<p>I think it's still time for a general presentation of Opal, but if anyone feels otherwise I'm open to feedback. 
Here are some alternative (additional?) topics that would be fun to present:</p>

<ul>
<li>re-implementing Rack and Sinatra on Node.js in Ruby</li>
<li>using Opal objects and methods from Javascript/CoffeeScript</li>
<li>testing native Javascript with Opal Spec</li>
<li>Vienna, the Ruby client MVC</li>
</ul>"
    },
    {
        "start" : 1372515300,
        "end" : 1372518000,
        "speaker_id" : "Koichi",
        "title" : "Closing & Vote",
        "descr" : "light!"
    }
]
}

